# --- 1. A Aplicação: DaemonSet ---
# Garante que um pod seja executado em cada nó.
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nodeserver-info-daemonset
  namespace: default # É bom sempre definir o namespace
  labels:
    app: nodeserver-info
spec:
  selector:
    matchLabels:
      app: nodeserver-info
  template:
    metadata:
      labels:
        app: nodeserver-info
    spec:
      containers:
      - name: nodeserver-info
        image: nginx:latest
        ports:
        - containerPort: 80
        command:
        - /bin/sh
        - -c
        - |
          echo "<h1>Estou a ser servido pelo no: $(NODE_NAME)</h1>" > /usr/share/nginx/html/index.html && nginx -g 'daemon off;'
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
---
# --- 2. O Serviço Interno ---
# Cria um ponto de acesso interno para os pods do DaemonSet.
apiVersion: v1
kind: Service
metadata:
  name: nodeserver-info-service
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: nodeserver-info
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
---
# --- 3. A Rota Externa com SSL ---
# A forma correta de expor o serviço usando Traefik.
apiVersion: traefik.io/v1alpha1 # <-- A versão correta da API!
kind: IngressRoute
metadata:
  name: nodeserver-info-route
  namespace: default
spec:
  entryPoints:
    # Escuta apenas no ponto de entrada seguro (HTTPS, porta 443)
    - websecure
  routes:
  - match: Host(`nodeinfo.hubsolidario.duckdns.org`) # <-- Seu domínio
    kind: Rule
    services:
      # Aponta para o serviço interno criado acima
      - name: nodeserver-info-service
        port: 80
  tls:
    # Diz ao Traefik para usar o 'resolvedor' que criamos na Fase 1
    certResolver: letsencrypt