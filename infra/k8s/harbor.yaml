# --- Harbor Namespace ---
apiVersion: v1
kind: Namespace
metadata:
  name: harbor
---
# --- Harbor Database (PostgreSQL) ---
apiVersion: v1
kind: Secret
metadata:
  name: harbor-database-secret
  namespace: harbor
type: Opaque
data:
  # postgres
  postgres-password: aGFyYm9yUGFzcw== # harborPass
  password: aGFyYm9yUGFzcw== # harborPass
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-database-pvc
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-database
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-database
  template:
    metadata:
      labels:
        app: harbor-database
    spec:
      containers:
        - name: postgresql
          image: postgres:13
          env:
            - name: POSTGRES_DB
              value: registry
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: harbor-database-secret
                  key: postgres-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: database-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: database-storage
          persistentVolumeClaim:
            claimName: harbor-database-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-database
  namespace: harbor
spec:
  selector:
    app: harbor-database
  ports:
    - port: 5432
      targetPort: 5432
---
# --- Redis for Harbor ---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-redis-pvc
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-redis
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-redis
  template:
    metadata:
      labels:
        app: harbor-redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: harbor-redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  namespace: harbor
spec:
  selector:
    app: harbor-redis
  ports:
    - port: 6379
      targetPort: 6379
---
# --- Harbor Core Configuration ---
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core-secret
  namespace: harbor
type: Opaque
data:
  # Senha para admin do Harbor: HarborAdmin123
  harbor_admin_password: SGFyYm9yQWRtaW4xMjM=
  # Secret key para criptografia
  secret_key: WW91ckhhcmJvclNlY3JldEtleUhlcmU=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core-config
  namespace: harbor
data:
  app.conf: |
    appname = harbor
    runmode = prod

    [prod]
    httpport = 8080

    # Database configuration
    hostname = harbor-database
    port = 5432
    username = postgres
    password = harborPass
    database = registry
    sslmode = disable
    max_idle_conns = 50
    max_open_conns = 1000

    # Redis configuration
    redis_host = harbor-redis
    redis_port = 6379
    redis_password = 
    redis_db = 0
---
# --- Harbor Registry (Distribution) ---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-registry-pvc
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: local-path
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-registry-config
  namespace: harbor
data:
  config.yml: |
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /var/lib/registry
      delete:
        enabled: true
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
    auth:
      htpasswd:
        realm: harbor-registry-realm
        path: /etc/registry/passwd
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
  passwd: |
    admin:$2a$10$Z6QzqHG8YF5gV0nYEzAhm.MjqyY4K0y2OtE.6kF5K8x8.Q1yF2o7O
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-registry
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-registry
  template:
    metadata:
      labels:
        app: harbor-registry
    spec:
      containers:
        - name: registry
          image: registry:2
          ports:
            - containerPort: 5000
          env:
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core-secret
                  key: secret_key
          volumeMounts:
            - name: registry-storage
              mountPath: /var/lib/registry
            - name: registry-config
              mountPath: /etc/docker/registry
            - name: registry-auth
              mountPath: /etc/registry
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: registry-storage
          persistentVolumeClaim:
            claimName: harbor-registry-pvc
        - name: registry-config
          configMap:
            name: harbor-registry-config
            items:
              - key: config.yml
                path: config.yml
        - name: registry-auth
          configMap:
            name: harbor-registry-config
            items:
              - key: passwd
                path: passwd
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-registry
  namespace: harbor
spec:
  selector:
    app: harbor-registry
  ports:
    - port: 5000
      targetPort: 5000
---
# --- Harbor Core (API + Portal) ---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-core-pvc
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-core
  template:
    metadata:
      labels:
        app: harbor-core
    spec:
      containers:
        - name: harbor-core
          image: goharbor/harbor-core:v2.8.0
          ports:
            - containerPort: 8080
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core-secret
                  key: secret_key
            - name: HARBOR_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: harbor-core-secret
                  key: harbor_admin_password
            - name: DATABASE_TYPE
              value: postgresql
            - name: POSTGRESQL_HOST
              value: harbor-database
            - name: POSTGRESQL_PORT
              value: "5432"
            - name: POSTGRESQL_USERNAME
              value: postgres
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: harbor-database-secret
                  key: postgres-password
            - name: POSTGRESQL_DATABASE
              value: registry
            - name: REDIS_HOST
              value: harbor-redis
            - name: REDIS_PORT
              value: "6379"
            - name: REGISTRY_URL
              value: http://harbor-registry:5000
            - name: EXTERNAL_URL
              value: https://registry.core.hubsolidario.com
          volumeMounts:
            - name: core-storage
              mountPath: /data
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
      volumes:
        - name: core-storage
          persistentVolumeClaim:
            claimName: harbor-core-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  namespace: harbor
spec:
  selector:
    app: harbor-core
  ports:
    - port: 8080
      targetPort: 8080
---
# --- Harbor Portal (Web UI) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-portal
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-portal
  template:
    metadata:
      labels:
        app: harbor-portal
    spec:
      containers:
        - name: harbor-portal
          image: goharbor/harbor-portal:v2.8.0
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-portal
  namespace: harbor
spec:
  selector:
    app: harbor-portal
  ports:
    - port: 8080
      targetPort: 8080
